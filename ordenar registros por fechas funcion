#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINE_LENGTH 1000 //long max permitida para una linea del .csv

typedef struct {
    char nombre[MAX_LINE_LENGTH];//cadena de caracteres
    double numeros[24];  // vector de números para las 24 columnas
} Registro;//estructura llamada registro, que contiene dos campos: nombre y numero

int columna;  // Variable global para almacenar la columna a ordenar

int comparar_numeros(const void *a, const void *b) {//la utiliza la funcion qsort para ordenar los registros
    const Registro *registroA = (const Registro *)a;//punteros a registros
    const Registro *registroB = (const Registro *)b;

    double numeroA = registroA->numeros[columna - 1];//se obtienen valores numericos de la columna especificada
    double numeroB = registroB->numeros[columna - 1];

    if (numeroA < numeroB) return 1;//si el valor del registro a es menor q el del registro b devuelve 1
    if (numeroA > numeroB) return -1;
    return 0;
}
//la siguiente funcion se encarga de abrir los archivos, leer los registros del csv y ordenarlos por la columna especificada
void ordenarRegistros(const char *nombreArchivoCSV, const char *nombreArchivoTXT, int col) {
    FILE *archivoCSV = fopen(nombreArchivoCSV, "r");//lee el csv
    FILE *archivoTXT = fopen(nombreArchivoTXT, "w");//escribe el .txt resultante

    if (archivoCSV == NULL || archivoTXT == NULL) {
        printf("Error al abrir los archivos.\n");;//por si alguno de los archivos no se puede abrir
        return;
    }

    Registro registros[MAX_LINE_LENGTH];//vector de la estructura registro que se utiliza para almacenar lo leido en el .csv
    char linea[MAX_LINE_LENGTH];//almacena temporalmente lo leidoen una linea
    int indice = 0;//realiza el seguimiento del numero de registros leidos en .csv

    // Leer el archivo CSV y guardar los datos en un vector de registros
    while (fgets(linea, MAX_LINE_LENGTH, archivoCSV) != NULL) {//fgets lee una linea completa del .csv lo almacena en el vector linea, y si no es nula sigue
        char *token = strtok(linea, ",");//la funcion strtok nos divide la linea en tokens separados por comas
        strncpy(registros[indice].nombre, token, MAX_LINE_LENGTH);//el primer token corresponde a nombre y se copia en el campo nombre

        for (int i = 0; i < 24; i++) {
            token = strtok(NULL, ",");
            registros[indice].numeros[i] = atof(token);//recorre las 24 columnas y convierten los tokens siguientes en numeros y se almacenan en la variable numeros
        }

        indice++;//se incrementa para leer mas registros
    }

    int numRegistros = indice;//guarda el numero total en una variable

    // Asignar la columna especificada
    columna = col;

    if (columna < 1 || columna > 24) {
        printf("Número de columna inválido.\n");
        return;
    }

    // Ordenar los registros por número de mayor a menor
    qsort(registros, numRegistros, sizeof(Registro), comparar_numeros);

    // Mostrar los registros ordenados en la salida estándar
    printf("Registros ordenados:\n");
    for (int i = 0; i < numRegistros; i++) {
        printf("%s,%.2lf\n", registros[i].nombre, registros[i].numeros[columna - 1]);
    }

    // Escribir los registros ordenados en el archivo de texto
    for (int i = 0; i < numRegistros; i++) {
        fprintf(archivoTXT, "%s,%.2lf\n", registros[i].nombre, registros[i].numeros[columna - 1]);
    }

    //printf("\n\n\n%s", registro.nombre[1]);
    printf("Archivo generado exitosamente: %s\n", archivoTXT);

    fclose(archivoCSV);
    fclose(archivoTXT);
}
